import subprocess, re , os


def main():
    libs = get_installed_libraries()
    for lib in libs:
        scan_library(lib)


def get_installed_libraries():
    row_pattern = r'ii\s+\S+\s+\S+\s+\S+'
    result = subprocess.run("dpkg -l",shell=True, stdout=subprocess.PIPE).stdout.decode('utf-8')
    rows = re.findall(row_pattern,result)
    library_list = list(map(row_to_dictionary,rows))
    return library_list

def row_to_dictionary(row):
    field_pattern = r'\s+\S+\s+\S+\s+\S+'
    str_without_i = re.findall(field_pattern,row)[0]
    field_list= re.split(r'\s+',str_without_i)
    lib_dict = {"name":field_list[1] , "version": field_list[2], "architecture": field_list[3]}
    return lib_dict


def scan_library(library):
    library_name = library["name"]
    output = subprocess.run(['dpkg', '-L', library_name], stdout=subprocess.PIPE).stdout.decode('utf-8')
    path_list = output.split("\n")
    path_list_filtered = list(filter(lambda x: os.path.isfile(x) ,path_list))
    for path in path_list_filtered:
        checkPath(path, library_name)
    # pass lists to respective functions


def checkPath(path:str, package_name:str):
    path = path.strip(' \t\n\r')
    counter_diff_Links = 0
    if len(path)>0:
        command = "file "+path
        file_info = subprocess.run(command,shell=True, stdout=subprocess.PIPE).stdout.decode('utf-8')
        file_type = get_file_type(file_info)
        if (file_type == "LINK"):
            command="readlink -f"+path
            pointed_to = subprocess.run(command, shell=True,stdout=subprocess.PIPE).stdout.decode('utf-8')
            command = "dpkg -S" + pointed_to
            package_name_pointed_to =  subprocess.run(command, shell=True,stdout=subprocess.PIPE).stdout.decode('utf-8')
            if(package_name != package_name_pointed_to):
                counter_diff_Links=counter_diff_Links+1
        print(counter_diff_Links)


def get_file_type(file_info):
    if "text" in file_info:
        #ascii text executable not caught here
        #generate list of file() outputs, sort, examine --> fine tune the search
        return "TEXT"
    elif "ELF" in file_info:
        return "ELF"
    elif "symbolic link" in file_info:
        return "LINK"
    else:
        return None
