import glob, os, sys, subprocess
from csv import reader

# gets the objdump of each file and adds keywords to dictionary
def scan_file_add_to_dict(path):
    temp_path = "temp.txt"
    obj_command = ' objdump -D ' + path +' > '+ temp_path
    # os call the command (objdump and store in temp)
    subprocess.call(obj_command,shell=True)
    found_words = find_words_in_file(temp_path)
    #if keywords found (set is not empty) then add to dictionary
    if len(found_words)>0:
        file_dict[path] = found_words
    # erase temp file    
    subprocess.call("rm temp.txt",shell=True)            

# look for keywords in the file and return as set
def find_words_in_file(path):
    dump = open(path)
    found = set()
    for line in dump:
        for func_word in func_list:
            if (func_word in line):
                found.add(func_word)
    return found

def load_functions_from_csv():
    # read csv file as a list of lists
    with open('vulnerable_functions.csv', 'r') as read_obj:
        # pass the file object to reader() to get the reader object
        csv_reader = reader(read_obj)
        # Pass reader object to list() to get a list of lists
        list_of_rows = list(csv_reader)
        return list(map(lambda x: x[0],list_of_rows))
        


## entry point (main)
func_list = load_functions_from_csv()
file_type = ".so"
#retrieve user argument which is path to root directory to scan
root_directory_path = sys.argv[1]
#build list of paths of files of type "file_type" from root directory(recursively)
path_list = glob.glob(root_directory_path+"/**/*"+file_type,recursive=True)
file_dict = {}
for path in path_list:
    scan_file_add_to_dict(path)

print(file_dict)



    