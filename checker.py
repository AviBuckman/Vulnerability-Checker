import subprocess, re , os
from string_checker import txtFileChecker
from csv import reader, writer
from db_handler_test import *

# dictionary keys
PACKAGE = "package"
FULL_PATH = "full_path"
DIRECTORY = "directory"
FILE_NAME = "file_name"
FILE_OUTPUT = "file_info_output"
MD5="md5"
SHA1 ="sha1"
SHA256 = "sha256"
STRINGS = "strings"
READELF = "readelf"
VULNERABLE_FUNC= "vulnerable_functions"
SECRET_KEYS = "secret_keys"
columnName = [PACKAGE, FULL_PATH, DIRECTORY, FILE_NAME, FILE_OUTPUT, MD5, SHA1, SHA256, STRINGS,  READELF, VULNERABLE_FUNC, SECRET_KEYS]
def get_directory(path):
    dir_path = os.path.dirname(path) 
    dir_name = os.path.basename(dir_path) 
    return dir_name

def get_file_name(path):
    return os.path.basename(path) 

# gets the objdump of each file and adds keywords to dictionary
def scan_binary(path):
    dump = subprocess.run(['objdump', '-D', path], stdout=subprocess.PIPE).stdout.decode('utf-8')
    found = set()
    for func_word in func_list:
        if func_word in dump:
            found.add(func_word)    
    if len(found) > 0:
        row_dict = {}
        row_dict[READELF] = subprocess.run(f"readelf -a {path}", shell=True,stdout=subprocess.PIPE).stdout.decode('utf-8')
        row_dict[VULNERABLE_FUNC] = str(found)
        return row_dict
    else:
        return None

def load_functions_from_csv():
    # read csv file as a list of lists
    with open('vulnerable_functions.csv', 'r') as read_obj:
        # pass the file object to reader() to get the reader object
        csv_reader = reader(read_obj)
        # Pass reader object to list() to get a list of lists
        list_of_rows = list(csv_reader)
        return list(map(lambda x: x[0],list_of_rows))

""" params one row entry outputted by dpkg -l
    returns dictionary of library info
"""
def row_to_dictionary(row):
    field_pattern = r'\s+\S+\s+\S+\s+\S+'
    str_without_i = re.findall(field_pattern,row)[0]
    field_list= re.split(r'\s+',str_without_i)
    lib_dict = {"name":field_list[1] , "version": field_list[2], "architecture": field_list[3]}
    return lib_dict

"""
    runs linux call dpkg -l and outputs list of libraries
    each library is of form dictionary {name, version, architecture}
"""
def get_installed_libraries():
    row_pattern = r'ii\s+\S+\s+\S+\s+\S+'
    result = subprocess.run("dpkg -l",shell=True, stdout=subprocess.PIPE).stdout.decode('utf-8')
    rows = re.findall(row_pattern,result)
    library_list = list(map(row_to_dictionary,rows))
    return library_list


def scan_library(library):
    library_name = library["name"]
    output = subprocess.run(['dpkg', '-L', library_name], stdout=subprocess.PIPE).stdout.decode('utf-8')
    path_list = output.split("\n")
    path_list_filtered = list(filter(lambda x: os.path.isfile(x) ,path_list))
    for path in path_list_filtered:
        checkPath(path, library_name)
    # pass lists to respective functions

    
"""
    param: file path 
    returns: TEXT, ELF, LINK based on file type
"""    
def get_file_type(file_info):
    if "text" in file_info:
        #ascii text executable not caught here
        #generate list of file() outputs, sort, examine --> fine tune the search
        return "TEXT"
    elif "ELF" in file_info:
        return "ELF"
    elif "symbolic link" in file_info:
        return "LINK"
    else:
        return None

        #1) check what filetype it is
        #2) if text or elf, append to list
        #3) if link
def checkPath(path:str, package_name:str):
    path = path.strip(' \t\n\r')
    if len(path)>0:
        command = "file "+path
        file_info = subprocess.run(command,shell=True, stdout=subprocess.PIPE).stdout.decode('utf-8')
        entry_dict = {}
        file_type = get_file_type(file_info)
        if file_type == "TEXT" or file_type == "ELF":
            if file_type == "TEXT":
                entry_dict = txtFileChecker(path)
                ## path + strings output + keys
            else:              
                #ELF
                entry_dict = scan_binary(path)
            if entry_dict != None:
                entry_dict[PACKAGE] = package_name
                entry_dict[FULL_PATH] = path
                path_file = os.path.dirname(path)
                entry_dict[DIRECTORY] = os.path.basename(path_file)
                entry_dict[FILE_NAME] = os.path.split(path)[-1]
                entry_dict[FILE_OUTPUT] = file_info
                hash_dict = generate_hashes(path)
                entry_dict[SHA1] = hash_dict[SHA1]
                entry_dict[SHA256] = hash_dict[SHA256]
                entry_dict[MD5] = hash_dict[MD5]
                add_row(entry_dict)
        elif (file_type == "LINK"):
            command="readlink -f "+path
            pointed_to = subprocess.run(command, shell=True,stdout=subprocess.PIPE).stdout.decode('utf-8')
            #ASK YOTAM- not sure this is ok to do
            checkPath(pointed_to,"")
"""
    row_dictionary: row- list of strings that represents row in csv to add
"""
# columnName = ["package", "full_path","directory","file_name" , "file_info_output", "md5", "sha1", "sha256" , "strings","readelf","vulnerable_functions", "secret_keys"]


def insert_row(row):
    with open('DB_file.csv', 'a+', newline='') as DB_file:
        wr = writer(DB_file, dialect='excel')
        wr.writerow(row)


def add_row(row_dictionary):
    row = [""] * 12
    i=0
    for word in columnName:
        if word in row_dictionary.keys():
            row[i] = row_dictionary[word]
        else:
            row[i] = ""
        i+=1
    insert_row(row)
    print(f"Added row: {str(row_dictionary)}")
    # insert_DB(row, connectToDB)

def generate_hashes(path):
    hashes = {SHA1: "", MD5: "", SHA256: ""}
    for key in hashes.keys():
        output = subprocess.run(f"{key}sum {path}", shell=True, stdout=subprocess.PIPE).stdout.decode('utf-8')
        hashes[key] = output.split(' ')[0]
    return hashes
#entry point
# connectToDB = Connection()
func_list = load_functions_from_csv()
libs = get_installed_libraries()
for lib in libs:
    scan_library(lib)

# connectToDB.close()


    