import subprocess, re
from csv import reader

# gets the objdump of each file and adds keywords to dictionary
def scan_binary(path):
    dump = subprocess.run(['objdump', '-D', path], stdout=subprocess.PIPE).stdout.decode('utf-8')
    found = set()
    for func_word in func_list:
        if func_word in dump:
            found.add(func_word)    
    return found         


def load_functions_from_csv():
    # read csv file as a list of lists
    with open('vulnerable_functions.csv', 'r') as read_obj:
        # pass the file object to reader() to get the reader object
        csv_reader = reader(read_obj)
        # Pass reader object to list() to get a list of lists
        list_of_rows = list(csv_reader)
        return list(map(lambda x: x[0],list_of_rows))

""" params one row entry outputted by dpkg -l
    returns dictionary of library info
"""
def row_to_dictionary(row):
    field_pattern = r'\s+\S+\s+\S+\s+\S+'
    str_without_i = re.findall(field_pattern,row)[0]
    field_list= re.split(r'\s+',str_without_i)
    lib_dict = {"name":field_list[1] , "version": field_list[2], "architecture": field_list[3]}
    return lib_dict

"""
    runs linux call dpkg -l and outputs list of libraries
    each library is of form dictionary {name, version, architecture}
"""
def get_installed_libraries():
    row_pattern = r'ii\s+\S+\s+\S+\s+\S+'
    result = subprocess.run("dpkg -l",shell=True, stdout=subprocess.PIPE).stdout.decode('utf-8')
    rows = re.findall(row_pattern,result)
    library_list = list(map(row_to_dictionary,rows))
    return library_list



def scan_library(library):
    output = subprocess.run(['dpkg', '-L', library["name"]], stdout=subprocess.PIPE).stdout.decode('utf-8')
    path_list = output.split("\n")
    for path in path_list:
        if get_file_type(path) == "TEXT":
            return 0
            #print("TEXT:       {}".format(path))
        elif get_file_type(path) == "ELF":
            print("ELF:       {}".format(path))
            if len(scan_binary(path)) > 0:
                ("--------------------------LENGTH>0----------------------")
        elif get_file_type(path) == "LINK":
            return 0
            #print("LINK:       {}".format(path))

"""
    param: file path 
    returns: TEXT, ELF, LINK based on file type
"""    
def get_file_type(file_path):
    command = "file {file_path}".format(file_path=file_path)
    result = subprocess.run(command,shell=True, stdout=subprocess.PIPE).stdout.decode('utf-8')
    if "text" in result:
        return "TEXT"
    elif "ELF" in result:
        return "ELF"
    elif "symbolic link" in result:
        return "LINK"
    else:
        return None

#entry point
func_list = load_functions_from_csv()
libs = get_installed_libraries()
for lib in libs:
    scan_library(lib)



    