from csv import reader
import subprocess, re , os, sqlite3, atexit

file_exec_dict = {}         #{path: {file_info: objdump output: readelf: }}
objdump_key = "objdump"
file_info_key = "file_info"
path_key = "path"
readelf_key = "readelf"
class_DB_name = 'research.db'
table_name = "FileSample"
db_con = sqlite3.connect(class_DB_name)
CHECKSEC = "checksec"

def get_data():
    global reader
    with open("./file_types1.csv", "r") as f:
        my_reader = reader(f, delimiter=",")
        for i, line in enumerate(my_reader):
            path = line[1]
            print(path)
            command = "sudo file "+path
            file_info = subprocess.run(command,shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            file_stderr = "" if file_info.stderr is None else file_info.stderr.decode('utf-8')
            file_info = file_info.stdout.decode('utf-8')
            print(file_info)
            # file_info = file_info.split(':')[1]

            # if file_stderr != "":
            #     raise Exception()
            
            # command = f"sudo ~/checksec/checksec.sh/./checksec --verbose --extended --file={path}"
            # checksec_output = subprocess.run(command,shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            # checksec_stderr = checksec_output.stderr.decode('utf-8') if checksec_output.stderr else ""
            # checksec_output = checksec_output.stdout.decode('utf-8') if checksec_output.stdout else ""

            # command = f"sudo readelf -a {path}"
            # readelf_output = subprocess.run(command,shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            # readelf_stderr = readelf_output.stderr.decode('utf-8') if readelf_output.stderr else ""
            # readelf_output = readelf_output.stdout.decode('utf-8') if readelf_output.stdout else ""

            # command = f"sudo objdump -D {path}"
            # objdump_output = subprocess.run(command,shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            # objdump_stderr = objdump_output.stderr.decode('utf-8') if objdump_output.stderr else ""
            # objdump_output = objdump_output.stdout.decode('utf-8') if objdump_output.stdout else ""

            # readelf_output = readelf_stderr if readelf_stderr != "" else readelf_output
            # objdump_output = objdump_stderr if objdump_stderr != "" else objdump_output
            # checksec_output = checksec_stderr if checksec_stderr != "" else checksec_output
            # print(f"stderr: {readelf_stderr}")
            # print(f"stdout: {readelf_output}")
            # # insert(path, file_info, readelf_output, objdump_output, checksec_output)
            




def _close_db():
    db_con.commit()
    db_con.close()



def print_tables():
    print_table_by_name(table_name)
    


def print_table_by_name(table_name):
    with db_con:
        cur = db_con.cursor()
        cur.execute("SELECT * FROM  " + table_name)
        print(table_name)
        for row in cur.fetchall():
            print(row)


def create_tables():
    with db_con:
        cur = db_con.cursor()
        cur.executescript(f"""
                CREATE TABLE IF NOT EXISTS {table_name} (
	            {path_key}	TEXT,
                {file_info_key} TEXT,
	            {readelf_key}	TEXT,
	            {objdump_key}	TEXT,
                {CHECKSEC}      TEXT,
	            PRIMARY KEY({path_key})
);
            """)
        cur.close()


def insert(path, file_info, readelf, objdump, checksec):
    with db_con:
        cur = db_con.cursor()
        cur.execute(f"""
                INSERT INTO {table_name} ({path_key}, {file_info_key}, {readelf_key}, {objdump_key}, {CHECKSEC}
                    )
                VALUES (?,?,?,?,?)
            """, ([path, file_info, readelf, objdump, checksec]))
        cur.close()

atexit.register(_close_db)
create_tables()
get_data() 
