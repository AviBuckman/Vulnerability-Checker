from csv import reader
import subprocess, re , os, sqlite3, atexit

file_exec_dict = {}         #{path: {file_info: objdump output: readelf: }}
objdump_key = "objdump"
file_info_key = "file_info"
path_key = "path"
readelf_key = "readelf"
class_DB_name = 'research.db'
table_name = "FileSample"
db_con = sqlite3.connect(class_DB_name)

def get_data():
    global reader
    with open("/home/avi/Vulnerability-Checker/file_types1.csv", "r") as f:
        my_reader = reader(f, delimiter=",")
        for i, line in enumerate(my_reader):
            file_info = line[0]
            path = line[1]
            print(path)
            readelf_output = subprocess.run(f"readelf -a {path}", shell=True,stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout.decode('utf-8')
            objdump_output = subprocess.run(f"objdump -D {path}", shell=True,stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout.decode('utf-8')
            readelf_invalid = readelf_output.startswith("readelf: Error")            
            objdump_invalid = "File format not recognized" in objdump_output or "UNKNOWN" in objdump_output
            if "No such file" in readelf_output or "No such file" in objdump_output:
                pass 
            else:
                readelf_output = readelf_output if readelf_invalid else "valid"
                objdump_output = objdump_output if objdump_invalid else "valid" 
                insert(path, file_info, readelf_output, objdump_output)
            




def _close_db():
    db_con.commit()
    db_con.close()



def print_tables():
    print_table_by_name(table_name)
    


def print_table_by_name(table_name):
    with db_con:
        cur = db_con.cursor()
        cur.execute("SELECT * FROM  " + table_name)
        print(table_name)
        for row in cur.fetchall():
            print(row)


def create_tables():
    with db_con:
        cur = db_con.cursor()
        cur.executescript(f"""
                CREATE TABLE IF NOT EXISTS {table_name} (
	            {path_key}	TEXT,
                {file_info_key} TEXT,
	            {readelf_key}	TEXT,
	            {objdump_key}	TEXT,
	            PRIMARY KEY({path_key})
);
            """)
        cur.close()


def insert(path, file_info, readelf, objdump):
    with db_con:
        cur = db_con.cursor()
        cur.execute(f"""
                INSERT INTO {table_name} ({path_key}, {file_info_key}, {readelf_key}, {objdump_key}
                    )
                VALUES (?,?,?,?)
            """, ([path, file_info, readelf, objdump]))
        cur.close()

atexit.register(_close_db)
create_tables()
get_data() 
