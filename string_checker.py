import glob, os, sys, subprocess,re
from csv import reader
from db_handler import *
# dictionary keys
PACKAGE = "package"
FULL_PATH = "full_path"
LINE="line"
DIRECTORY = "directory"
FILE_NAME = "file_name"
FILE_OUTPUT = "file_info_output"
MD5="md5"
SHA1 ="sha1"
SHA256 = "sha256"
B2 = "b2"
STRINGS = "strings"
READELF = "readelf"
VULNERABLE_FUNC= "vulnerable_functions"
SECRET_KEYS = "secret_keys"
columnName = [PACKAGE, FULL_PATH, DIRECTORY, FILE_NAME, FILE_OUTPUT, MD5, SHA1, SHA256, B2 , STRINGS,  READELF, VULNERABLE_FUNC, SECRET_KEYS]


def findKeyWordsInFile(output: str, secretKeysList: list):
    txt = output
    lines = txt.split("\n")
    found = set()
    linesToAdd=set()
    for line in lines:
        for func_word in secretKeysList:
            if re.search(func_word , line, re.IGNORECASE):
                found.add(func_word)
                linesToAdd.add(line)

    return found, linesToAdd

def loadKeysFromCsv():
    with open('secretKeys.csv', 'r') as read_obj:
        csv_reader = reader(read_obj)
        list_of_rows = list(csv_reader)
        return list(map(lambda x: x[0], list_of_rows))


def txtFileChecker(path: str, package: str, package_manager: str, version: str):
    secretKeysList = loadKeysFromCsv()
    file_dict = dict()
    strings_command = 'strings ' + path
   # tmp = subprocess.run(strings_command, shell=True, stdout=subprocess.PIPE).stdout.decode('utf-8')
    strings_output = subprocess.run(strings_command, shell=True, stdout=subprocess.PIPE).stdout.decode('utf-8')
    foundKeys, lines = findKeyWordsInFile(strings_output, secretKeysList)
    if len(foundKeys) > 0:
        file_dict[STRINGS] = strings_output
        file_dict[SECRET_KEYS] = foundKeys
    else:
        file_dict = None
    
    return file_dict, lines
