import sys
import os
import pyodbc as driver
import logging

logging.basicConfig(filename='example.log')

PACKAGE = "package"
PACKAGE_MANAGER = "package_manager"
VERSION = "version"
FULL_PATH = "full_path"
DIRECTORY = "directory"
FILE_NAME = "file_name"
FILE_OUTPUT = "file_info_output"
MD5 = "md5"
SHA1 = "sha1"
SHA256 = "sha256"
B2 = "b2"
STRINGS = "strings"
READELF = "readelf"
VULNERABLE_FUNC = "vulnerable_functions"
SECRET_KEYS = "secret_keys"
CHECKSEC = "checksec"
LINE = "line"

vulnerability_table_name = 'vulnerabilities'
class_DB_name = f'{vulnerability_table_name}.db'

strings_table_name = 'stringsLines'

databaseExisted = os.path.isfile(class_DB_name)
driver_string = 'ODBC Driver 17 for SQL Server'
server = 'v-eam-server.database.windows.net'
database = 'Vulnerabilties'
username = 'namor'
password = 'EAM1234!'
connection_settings = f'DRIVER={driver_string};SERVER={server};DATABASE={database};UID={username};PWD={password}'


def create_tables():
    create_query = f"""
        IF NOT EXISTS (SELECT *   
            FROM [Vulnerabilties].INFORMATION_SCHEMA.TABLES
            WHERE TABLE_NAME = 'vulnerabilities')
                BEGIN
                    SET ANSI_NULLS ON
                    SET QUOTED_IDENTIFIER ON
                    CREATE TABLE [dbo].[{vulnerability_table_name}](
                        [{PACKAGE}] [varchar](280) NOT NULL,
                        [{PACKAGE_MANAGER}] [varchar](10) NOT NULL,
                        [{VERSION}] [varchar](280) NOT NULL,
                        [{FULL_PATH}] [varchar](280) NOT NULL,
                        [{DIRECTORY}] [varchar](max) NOT NULL,
                        [{FILE_NAME}] [varchar](max) NOT NULL,
                        [{FILE_OUTPUT}] [varchar](8000) NOT NULL,
                        [{MD5}] [varchar](max) NOT NULL,
                        [{SHA1}] [varchar](max) NOT NULL,
                        [{SHA256}] [varchar](max) NOT NULL,
                        [{B2}] [varchar](max) NOT NULL,
                        [{STRINGS}] [varchar](max) NULL,
                        [{SECRET_KEYS}] [varchar](max) NULL,
                        [{READELF}] [varchar](max) NULL,
                        [{VULNERABLE_FUNC}] [varchar](max) NULL,
                        [{CHECKSEC}] [varchar](max) NULL
                    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
                    SET ANSI_PADDING ON
                    ALTER TABLE [dbo].[{vulnerability_table_name}] ADD PRIMARY KEY CLUSTERED 
                    (
                        [{PACKAGE}] ASC,
                        [{PACKAGE_MANAGER}] ASC,
                        [{VERSION}] ASC,
                        [{FULL_PATH}] ASC
                    )WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY]
                    
                    SET ANSI_NULLS ON
                    SET QUOTED_IDENTIFIER ON
                    CREATE TABLE [dbo].[{strings_table_name}](
                        [id] [uniqueidentifier] NOT NULL,
                        [{PACKAGE}] [varchar](280) NOT NULL,
                        [{PACKAGE_MANAGER}] [varchar](10) NOT NULL,
                        [{VERSION}] [varchar](280) NOT NULL,
                        [{FULL_PATH}] [varchar](280) NOT NULL,
                        [{LINE}] [varchar](max) NOT NULL
                    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
                    SET ANSI_PADDING ON
                    ALTER TABLE [dbo].[{strings_table_name}] ADD PRIMARY KEY CLUSTERED 
                    (
                        [id] ASC,
                        [{PACKAGE}] ASC,
                        [{PACKAGE_MANAGER}] ASC,
                        [{VERSION}] ASC,
                        [{FULL_PATH}] ASC
                    )WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY]
                    ALTER TABLE [dbo].[{strings_table_name}] ADD  DEFAULT (newid()) FOR [id]
                    ALTER TABLE [dbo].[{strings_table_name}]  WITH CHECK ADD FOREIGN KEY([{PACKAGE}], [{PACKAGE_MANAGER}], [{VERSION}], [{FULL_PATH}])
                    REFERENCES [dbo].[{vulnerability_table_name}] ([{PACKAGE}], [{PACKAGE_MANAGER}], [{VERSION}], [{FULL_PATH}])
                END  
                """  
    with driver.connect(connection_settings) as conn:
        conn.autocommit=True
        cur = conn.cursor()
        cur.execute(create_query)  
        # conn.commit()
        cur.close()
        conn.close()

def insert(entry_dicts, string_dicts):
    with driver.connect(connection_settings) as conn:
        query = ''
        try:
            conn.autocommit = False
            cur = conn.cursor()
            for entry in entry_dicts:
                query = build_insert_query(entry, vulnerability_table_name)
                print("inserting vulnerability entry")
                cur.execute(*query)  
            for entry in string_dicts:
                query = build_insert_query(entry, strings_table_name)
                print("inserting string entry")
                cur.execute(*query)  
        except driver.DatabaseError as err:
            conn.rollback()
            print(err)
            print("rolling back\n")
        else:
            conn.commit()
        finally:
            cur.close()
        
        

def build_insert_query(entry_dict:dict, table_name):
    column_string = ','.join(entry_dict.keys())
    q_mark_string = '?,'*len(entry_dict)
    q_mark_string = q_mark_string[:-1]
    query = f"""INSERT INTO [dbo].[{table_name}] ({column_string})
                VALUES ({q_mark_string})
            """
    params = list(entry_dict.values())
    return query, params

# def insert_executable(entry_dict):
#     package = entry_dict[PACKAGE]
#     package_manager = entry_dict[PACKAGE_MANAGER]
#     version = entry_dict[VERSION]
#     full_path = entry_dict[FULL_PATH]
#     directory = entry_dict[DIRECTORY]
#     file_name = entry_dict[FILE_NAME]
#     file_info_output = entry_dict[FILE_OUTPUT]
#     sha1 = entry_dict[SHA1]
#     sha256 = entry_dict[SHA256]
#     b2 = entry_dict[B2]
#     md5 = entry_dict[MD5]
#     readelf = entry_dict[READELF]
#     vulnerable_functions = entry_dict[VULNERABLE_FUNC]
#     checksec = entry_dict[CHECKSEC]
#     print(f"\tadding {full_path}")
#     params = [package, package_manager, version, full_path, directory, file_name, file_info_output,md5, sha1, sha256, b2, readelf, vulnerable_functions, checksec]
#     query = f"""
#                 INSERT INTO [dbo].[vulnerabilities] ({PACKAGE}, {PACKAGE_MANAGER}, {VERSION}, {FULL_PATH}, {DIRECTORY},
#                     {FILE_NAME}, {FILE_OUTPUT}, {MD5},
#                     {SHA1}, {SHA256}, {B2}, {READELF}, {VULNERABLE_FUNC}, {CHECKSEC})
#                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
#             """
#     exec_insert(query, params)


def should_scan_library(version: str, package_name: str, package_manager: str):
    query = f"SELECT * FROM vulnerabilities WHERE {VERSION} = '{version}' AND {PACKAGE} = '{package_name}' AND {PACKAGE_MANAGER} = '{package_manager}'"
    result = exec_query(query)
    if(len(result) == 0):
        return True
    return False

def should_check(path: str, version: str, package_name: str, package_manager: str):
    query = f"SELECT * FROM vulnerabilities WHERE {FULL_PATH} = '{path}' AND {VERSION} = '{version}' AND {PACKAGE} = '{package_name}' AND {PACKAGE_MANAGER} = '{package_manager}'"
    result = exec_query(query)
    if(len(result) == 0):
        return True
    return False


def exec_query(query):
    with driver.connect(connection_settings) as conn:
        conn.autocommit=True
        cur = conn.cursor()
        cur.execute(query)
        rows = cur.fetchall()
        cur.close()
        conn.close()
        return rows

