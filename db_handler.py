import sys
import os
import atexit
import pyodbc as driver
import logging

logging.basicConfig(filename='example.log')

PACKAGE = "package"
PACKAGE_MANAGER = "package_manager"
VERSION = "version"
FULL_PATH = "full_path"
DIRECTORY = "directory"
FILE_NAME = "file_name"
FILE_OUTPUT = "file_info_output"
MD5 = "md5"
SHA1 = "sha1"
SHA256 = "sha256"
B2 = "b2"
STRINGS = "strings"
READELF = "readelf"
VULNERABLE_FUNC = "vulnerable_functions"
SECRET_KEYS = "secret_keys"
CHECKSEC = "checksec"
LINE = "line"

vulnerability_table_name = 'vulnerabilities'
class_DB_name = f'{vulnerability_table_name}.db'

strings_table_name = 'stringsLines'

databaseExisted = os.path.isfile(class_DB_name)
server = 'v-eam-server.database.windows.net'
database = 'Vulnerabilties'
username = 'namor'
password = 'EAM1234!'
db_con = driver.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=' +
                        server+';DATABASE='+database+';UID='+username+';PWD=' + password)


def _close_db():
    db_con.commit()
    db_con.close()


atexit.register(_close_db)


def print_tables(table_name):
    print_table_by_name(table_name)


def delete(table_name):
    with db_con:
        cur = db_con.cursor()
        cur.execute("DROP TABLE " + table_name)


def print_table_by_name(table_name):
    with db_con:
        cur = db_con.cursor()
        cur.execute("SELECT * FROM  " + table_name)
        print(table_name)
        for row in cur.fetchall():
            print(row)




def create_tables():
    create_query = f"""
        IF NOT EXISTS (SELECT *   
            FROM [Vulnerabilties].INFORMATION_SCHEMA.TABLES
            WHERE TABLE_NAME = 'vulnerabilities')
                BEGIN
                    SET ANSI_NULLS ON
                    SET QUOTED_IDENTIFIER ON
                    CREATE TABLE [dbo].[{vulnerability_table_name}](
                        [{PACKAGE}] [varchar](280) NOT NULL,
                        [{PACKAGE_MANAGER}] [varchar](10) NOT NULL,
                        [{VERSION}] [varchar](280) NOT NULL,
                        [{FULL_PATH}] [varchar](280) NOT NULL,
                        [{DIRECTORY}] [varchar](max) NOT NULL,
                        [{FILE_NAME}] [varchar](max) NOT NULL,
                        [{FILE_OUTPUT}] [varchar](8000) NOT NULL,
                        [{MD5}] [varchar](max) NOT NULL,
                        [{SHA1}] [varchar](max) NOT NULL,
                        [{SHA256}] [varchar](max) NOT NULL,
                        [{B2}] [varchar](max) NOT NULL,
                        [{STRINGS}] [varchar](max) NULL,
                        [{SECRET_KEYS}] [varchar](max) NULL,
                        [{READELF}] [varchar](max) NULL,
                        [{VULNERABLE_FUNC}] [varchar](max) NULL,
                        [{CHECKSEC}] [varchar](max) NULL
                    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
                    SET ANSI_PADDING ON
                    ALTER TABLE [dbo].[{vulnerability_table_name}] ADD PRIMARY KEY CLUSTERED 
                    (
                        [{PACKAGE}] ASC,
                        [{PACKAGE_MANAGER}] ASC,
                        [{VERSION}] ASC,
                        [{FULL_PATH}] ASC
                    )WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY]
                    
                    SET ANSI_NULLS ON
                    SET QUOTED_IDENTIFIER ON
                    CREATE TABLE [dbo].[{strings_table_name}](
                        [id] [uniqueidentifier] NOT NULL,
                        [{PACKAGE}] [varchar](280) NOT NULL,
                        [{PACKAGE_MANAGER}] [varchar](10) NOT NULL,
                        [{VERSION}] [varchar](280) NOT NULL,
                        [{FULL_PATH}] [varchar](280) NOT NULL,
                        [{LINE}] [varchar](max) NOT NULL
                    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
                    SET ANSI_PADDING ON
                    ALTER TABLE [dbo].[{strings_table_name}] ADD PRIMARY KEY CLUSTERED 
                    (
                        [id] ASC,
                        [{PACKAGE}] ASC,
                        [{PACKAGE_MANAGER}] ASC,
                        [{VERSION}] ASC,
                        [{FULL_PATH}] ASC
                    )WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY]
                    ALTER TABLE [dbo].[{strings_table_name}] ADD  DEFAULT (newid()) FOR [id]
                    ALTER TABLE [dbo].[{strings_table_name}]  WITH CHECK ADD FOREIGN KEY([{PACKAGE}], [{PACKAGE_MANAGER}], [{VERSION}], [{FULL_PATH}])
                    REFERENCES [dbo].[{vulnerability_table_name}] ([{PACKAGE}], [{PACKAGE_MANAGER}], [{VERSION}], [{FULL_PATH}])
                END  
                """  
    exec_insert(create_query)


def insert_text_to_stringLines(string_dict, line):
    package = string_dict[PACKAGE]
    package_manager = string_dict[PACKAGE_MANAGER]
    version = string_dict[VERSION]
    full_path = string_dict[FULL_PATH]
    print(f"\tadding {full_path} to strings table")
    params = [package, package_manager, version, full_path, line]
    query = f"""
                INSERT INTO  [dbo].[stringsLines](id,{PACKAGE}, {PACKAGE_MANAGER}, {VERSION}, {FULL_PATH}, {LINE})
                VALUES (default, ?, ?, ?, ?, ?)
            """
    exec_insert(query, params)


def insert_text(entry_dict):
    package = entry_dict[PACKAGE]
    package_manager = entry_dict[PACKAGE_MANAGER]
    version = entry_dict[VERSION]
    full_path = entry_dict[FULL_PATH]
    directory = entry_dict[DIRECTORY]
    file_name = entry_dict[FILE_NAME]
    file_info_output = entry_dict[FILE_OUTPUT]
    sha1 = entry_dict[SHA1]
    sha256 = entry_dict[SHA256]
    md5 = entry_dict[MD5]
    b2 = entry_dict[B2]
    strings = entry_dict[STRINGS]
    secret_keys = str(entry_dict[SECRET_KEYS])
    print(f"\tadding {full_path}")
    params = [package, package_manager, version, full_path, directory, file_name, file_info_output,md5, sha1, sha256, b2, strings, secret_keys]
    query = f"""INSERT INTO [dbo].[vulnerabilities] ({PACKAGE},{PACKAGE_MANAGER}, {VERSION}, {FULL_PATH}, {DIRECTORY},
                    {FILE_NAME}, {FILE_OUTPUT}, {MD5},
                    {SHA1}, {SHA256}, {B2}, {STRINGS}, {SECRET_KEYS})
                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)
            """
    exec_insert(query, params)


def insert_executable(entry_dict):
    package = entry_dict[PACKAGE]
    package_manager = entry_dict[PACKAGE_MANAGER]
    version = entry_dict[VERSION]
    full_path = entry_dict[FULL_PATH]
    directory = entry_dict[DIRECTORY]
    file_name = entry_dict[FILE_NAME]
    file_info_output = entry_dict[FILE_OUTPUT]
    sha1 = entry_dict[SHA1]
    sha256 = entry_dict[SHA256]
    b2 = entry_dict[B2]
    md5 = entry_dict[MD5]
    readelf = entry_dict[READELF]
    vulnerable_functions = entry_dict[VULNERABLE_FUNC]
    checksec = entry_dict[CHECKSEC]
    print(f"\tadding {full_path}")
    params = [package, package_manager, version, full_path, directory, file_name, file_info_output,md5, sha1, sha256, b2, readelf, vulnerable_functions, checksec]
    query = f"""
                INSERT INTO [dbo].[vulnerabilities] ({PACKAGE}, {PACKAGE_MANAGER}, {VERSION}, {FULL_PATH}, {DIRECTORY},
                    {FILE_NAME}, {FILE_OUTPUT}, {MD5},
                    {SHA1}, {SHA256}, {B2}, {READELF}, {VULNERABLE_FUNC}, {CHECKSEC})
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """
    exec_insert(query, params)


def should_scan_library(version: str, package_name: str, package_manager: str):
    query = f"SELECT * FROM vulnerabilities WHERE {VERSION} = '{version}' AND {PACKAGE} = '{package_name}' AND {PACKAGE_MANAGER} = '{package_manager}'"
    result = exec_query(query)
    if(len(result) == 0):
        return True
    return False

def should_check(path: str, version: str, package_name: str, package_manager: str):
    query = f"SELECT * FROM vulnerabilities WHERE {FULL_PATH} = '{path}' AND {VERSION} = '{version}' AND {PACKAGE} = '{package_name}' AND {PACKAGE_MANAGER} = '{package_manager}'"
    result = exec_query(query)
    if(len(result) == 0):
        return True
    return False


def exec_query(query, params=None):
    try:
        with db_con:
            cur = db_con.cursor()
            if params:
                cur.execute(query, *params)
            else:
                cur.execute(query)
            rows = cur.fetchall()
            cur.close()
            return rows
    except Exception as e:
        logging.warning("something raised an exception:", exc_info=True)


def exec_insert(query, params=None):
    try:
        with db_con:
            cur = db_con.cursor()
            if params:
                cur.execute(query, *params)
            else:
                cur.execute(query)
            cur.close()
    except Exception as e:
        logging.warning("something raised an exception:", exc_info=True)
