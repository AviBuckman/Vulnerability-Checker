import sys
import os
import pyodbc as driver
import logging

logging.basicConfig(filename='example.log')

PACKAGE = "package"
PACKAGE_MANAGER = "package_manager"
VERSION = "version"
FULL_PATH = "full_path"
DIRECTORY = "directory"
FILE_NAME = "file_name"
FILE_OUTPUT = "file_info_output"
MD5 = "md5"
SHA1 = "sha1"
SHA256 = "sha256"
B2 = "b2"
STRINGS = "strings"
READELF = "readelf"
VULNERABLE_FUNC = "vulnerable_functions"
SECRET_KEYS = "secret_keys"
CHECKSEC = "checksec"
LINE = "line"

vulnerability_table_name = 'vulnerabilities'
strings_table_name = 'stringsLines'

driver_string = 'ODBC Driver 17 for SQL Server'
server = 'v-eam-server.database.windows.net'
database = 'Vulnerabilties'
username = 'namor'
password = 'EAM1234!'
connection_settings = f'DRIVER={driver_string};SERVER={server};DATABASE={database};UID={username};PWD={password}'
create_query = f"""
        IF NOT EXISTS (SELECT *   
            FROM [{database}].INFORMATION_SCHEMA.TABLES
            WHERE TABLE_NAME = '{vulnerability_table_name}')
                BEGIN
                    SET ANSI_NULLS ON
                    SET QUOTED_IDENTIFIER ON
                    CREATE TABLE [dbo].[{vulnerability_table_name}](
                        [{PACKAGE}] [varchar](280) NOT NULL,
                        [{PACKAGE_MANAGER}] [varchar](10) NOT NULL,
                        [{VERSION}] [varchar](280) NOT NULL,
                        [{FULL_PATH}] [varchar](280) NOT NULL,
                        [{DIRECTORY}] [varchar](max) NOT NULL,
                        [{FILE_NAME}] [varchar](max) NOT NULL,
                        [{FILE_OUTPUT}] [varchar](8000) NOT NULL,
                        [{MD5}] [varchar](max) NOT NULL,
                        [{SHA1}] [varchar](max) NOT NULL,
                        [{SHA256}] [varchar](max) NOT NULL,
                        [{B2}] [varchar](max) NOT NULL,
                        [{STRINGS}] [varchar](max) NULL,
                        [{SECRET_KEYS}] [varchar](max) NULL,
                        [{READELF}] [varchar](max) NULL,
                        [{VULNERABLE_FUNC}] [varchar](max) NULL,
                        [{CHECKSEC}] [varchar](max) NULL
                    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
                    SET ANSI_PADDING ON
                    ALTER TABLE [dbo].[{vulnerability_table_name}] ADD PRIMARY KEY CLUSTERED 
                    (
                        [{PACKAGE}] ASC,
                        [{PACKAGE_MANAGER}] ASC,
                        [{VERSION}] ASC,
                        [{FULL_PATH}] ASC
                    )WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY]
                    
                    SET ANSI_NULLS ON
                    SET QUOTED_IDENTIFIER ON
                    CREATE TABLE [dbo].[{strings_table_name}](
                        [id] [uniqueidentifier] NOT NULL,
                        [{PACKAGE}] [varchar](280) NOT NULL,
                        [{PACKAGE_MANAGER}] [varchar](10) NOT NULL,
                        [{VERSION}] [varchar](280) NOT NULL,
                        [{FULL_PATH}] [varchar](280) NOT NULL,
                        [{LINE}] [varchar](max) NOT NULL
                    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
                    SET ANSI_PADDING ON
                    ALTER TABLE [dbo].[{strings_table_name}] ADD PRIMARY KEY CLUSTERED 
                    (
                        [id] ASC,
                        [{PACKAGE}] ASC,
                        [{PACKAGE_MANAGER}] ASC,
                        [{VERSION}] ASC,
                        [{FULL_PATH}] ASC
                    )WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY]
                    ALTER TABLE [dbo].[{strings_table_name}] ADD  DEFAULT (newid()) FOR [id]
                    ALTER TABLE [dbo].[{strings_table_name}]  WITH CHECK ADD FOREIGN KEY([{PACKAGE}], [{PACKAGE_MANAGER}], [{VERSION}], [{FULL_PATH}])
                    REFERENCES [dbo].[{vulnerability_table_name}] ([{PACKAGE}], [{PACKAGE_MANAGER}], [{VERSION}], [{FULL_PATH}])
                END  
                """


def create_tables():
    """ executes the create tables query
    """
    with driver.connect(connection_settings) as conn:
        conn.autocommit = True
        cur = conn.cursor()
        cur.execute(create_query)
        cur.close()
        conn.close()


def insert(vul_entry_dicts: list, string_entry_dicts: list):
    """ inserts lists of vulnerability and string entries

    Args:
        vul_entry_dicts (list): list of entries to add to vulnerability db
        string_entry_dicts (list): list of entries to add to strings db
    """
    with driver.connect(connection_settings) as conn:
        try:
            conn.autocommit = False
            cur = conn.cursor()
            execute_inserts(vul_entry_dicts, vulnerability_table_name, cur)
            execute_inserts(string_entry_dicts, strings_table_name, cur)
        except driver.DatabaseError as err:
            conn.rollback()
            print(err)
            print(
                f"rolling back\n vul_dic: {str(vul_entry_dicts)}\n string dict: {str(vul_entry_dicts)}")
        else:
            conn.commit()
        finally:
            cur.close()


def execute_inserts(entries: list, table_name: str, cursor):
    """iterates over list of entries and executes insert for each entry

    Args:
        entries (list): list of entries (dictionaries) to insert
        table_name (str): name of table to insert to
        cursor ([type]): the cursor used to insert
    """
    for entry in entries:
        query = build_insert_query(entry, table_name)
        cursor.execute(*query)


def build_insert_query(entry_dict: dict, table_name):
    """ recieves dictionariy that represents entries in a table and creates
        an insert query based on the entry. The keys of the entry MUST be written 
        exactly as the respective column in the table

    Args:
        entry_dict (dict): dictionary that represents a db entry
        table_name ([type]): name of table to insert
    """

    column_string = ','.join(entry_dict.keys())
    q_mark_string = '?,'*len(entry_dict)
    q_mark_string = q_mark_string[:-1]
    query = f"""INSERT INTO [dbo].[{table_name}] ({column_string})
                VALUES ({q_mark_string})
            """
    params = list(entry_dict.values())
    return query, params


def should_scan_library(version: str, package_name: str, package_manager: str):
    """checks if a library was already scanned by the checker

    Args:
        version (str): package version
        package_name (str): package name
        package_manager (str): package manager
    """
    query = f"""
    SELECT * FROM {vulnerability_table_name} 
    WHERE {VERSION} = '{version}' 
    AND {PACKAGE} = '{package_name}' 
    AND {PACKAGE_MANAGER} = '{package_manager}'
    """
    result = execute_select(query)
    return len(result) == 0


def should_check(path: str, version: str, package_name: str, package_manager: str):
    """checks if a file was already scanned by the checker

    Args:
        path (str): path of file to be checked
        version (str): package version
        package_name (str): package name
        package_manager (str): package manager
    """
    query = f"""
    SELECT * FROM {vulnerability_table_name} 
    WHERE {FULL_PATH} = '{path}' 
    AND {VERSION} = '{version}' 
    AND {PACKAGE} = '{package_name}' 
    AND {PACKAGE_MANAGER} = '{package_manager}'
    """
    result = execute_select(query)
    return len(result) == 0


def execute_select(query: str):
    """ executes the given select query and returns the corresponding rows

    Args:
        query (str): the "select" query to be executed
    """
    with driver.connect(connection_settings) as conn:
        conn.autocommit = True
        cur = conn.cursor()
        cur.execute(query)
        rows = cur.fetchall()
        cur.close()
        conn.close()
        return rows
