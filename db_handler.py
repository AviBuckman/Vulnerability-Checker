import sqlite3
import sys
import os
import atexit

PACKAGE = "package"
VERSION = "version"
FULL_PATH = "full_path"
DIRECTORY = "directory"
FILE_NAME = "file_name"
FILE_OUTPUT = "file_info_output"
MD5="md5"
SHA1 ="sha1"
SHA256 = "sha256"
B2 = "b2"
STRINGS = "strings"
READELF = "readelf"
VULNERABLE_FUNC= "vulnerable_functions"
SECRET_KEYS = "secret_keys"
CHECKSEC = "checksec"
LINE="Line"

class_DB_name = 'vulnerabilities.db'
table_name = 'vulnerabilities'
databaseExisted = os.path.isfile(class_DB_name)
db_con = sqlite3.connect(class_DB_name)


def _close_db():
    db_con.commit()
    db_con.close()


atexit.register(_close_db)


def print_tables():
    print_table_by_name(table_name)
    


def print_table_by_name(table_name):
    with db_con:
        cur = db_con.cursor()
        cur.execute("SELECT * FROM  " + table_name)
        print(table_name)
        for row in cur.fetchall():
            print(row)


def create_tables():
    with db_con:
        cur = db_con.cursor()
        cur.executescript(f"""
                CREATE TABLE IF NOT EXISTS `vulnerabilities` (
                    {PACKAGE}	TEXT NOT NULL,
                    {VERSION}   TEXT NOT NULL,
                    {FULL_PATH}	TEXT NOT NULL,
                    {DIRECTORY}	TEXT NOT NULL,
                    {FILE_NAME}	TEXT NOT NULL,
                    {FILE_OUTPUT}	TEXT NOT NULL,
                    {MD5}	TEXT NOT NULL,
                    {SHA1}	TEXT NOT NULL,
                    {SHA256}	TEXT NOT NULL,
                    {B2}	TEXT NOT NULL,
                    {STRINGS}	TEXT,
                    {SECRET_KEYS}	TEXT,
                    {READELF}	TEXT,
                    {VULNERABLE_FUNC}	TEXT,
                    {CHECKSEC}	TEXT
                    ); 
                CREATE TABLE IF NOT EXISTS `stringsLines` (
                    {FULL_PATH}	TEXT NOT NULL,
                    {LINE}    TEXT NOT NULL
                    );  
            """)

        cur.close()

def insert_text_to_stringLines(string_dict):
    full_path = string_dict[FULL_PATH]
    line = string_dict[LINE]
    print(f"adding {full_path} to strings table")
    with db_con:
        cur = db_con.cursor()
        cur.execute(f"""
                INSERT INTO  stringsLines({FULL_PATH}, {LINE})
                VALUES (?,?)
            """, ([full_path, line]))
        cur.close()

def insert_text(entry_dict):
    package = entry_dict[PACKAGE] 
    version = entry_dict[VERSION]
    full_path = entry_dict[FULL_PATH]
    directory = entry_dict[DIRECTORY] 
    file_name = entry_dict[FILE_NAME]
    file_info_output= entry_dict[FILE_OUTPUT]
    sha1 = entry_dict[SHA1]
    sha256 = entry_dict[SHA256]
    md5 = entry_dict[MD5] 
    b2 = entry_dict[B2]
    strings = entry_dict[STRINGS]
    secret_keys = str(entry_dict[SECRET_KEYS])
    print(f"adding {full_path}")
    with db_con:
        cur = db_con.cursor()
        cur.execute(f"""
                INSERT INTO vulnerabilities ({PACKAGE}, {VERSION}, {FULL_PATH}, {DIRECTORY}, 
                    {FILE_NAME}, {FILE_OUTPUT}, {MD5},
                    {SHA1}, {SHA256}, {B2}, {STRINGS}, {SECRET_KEYS})
                VALUES (?,?,?,?,?,?,?,?,?,?,?,?)
            """, ([package, version, full_path, directory, file_name, file_info_output, 
                  md5, sha1, sha256, b2, strings, secret_keys]))
        cur.close()
def insert_executable(entry_dict):
    
    package = entry_dict[PACKAGE] 
    version = entry_dict[VERSION]
    full_path = entry_dict[FULL_PATH]
    directory = entry_dict[DIRECTORY] 
    file_name = entry_dict[FILE_NAME]
    file_info_output= entry_dict[FILE_OUTPUT]
    sha1 = entry_dict[SHA1]
    sha256 = entry_dict[SHA256]
    b2 = entry_dict[B2]
    md5 = entry_dict[MD5] 
    readelf = entry_dict[READELF]
    vulnerable_functions = entry_dict[VULNERABLE_FUNC]
    checksec = entry_dict[CHECKSEC]
    print(f"adding {full_path}")
    with db_con:
        cur = db_con.cursor()
        cur.execute(f"""
                INSERT INTO vulnerabilities ({PACKAGE}, {VERSION}, {FULL_PATH}, {DIRECTORY}, 
                    {FILE_NAME}, {FILE_OUTPUT}, {MD5},
                    {SHA1}, {SHA256}, {B2}, {READELF}, {VULNERABLE_FUNC}, {CHECKSEC})
                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)
            """, ([package, version, full_path, directory, file_name, file_info_output, 
            md5, sha1, sha256, b2, readelf, vulnerable_functions, checksec]))
        cur.close()

def exe_query(query):
    with db_con:
        cur = db_con.cursor()
        cur.execute(query)
        rows=cur.fetchall()
        cur.close()
        return row