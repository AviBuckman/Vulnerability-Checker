from data_handler import DataHandler
from defs import *
import csv

VULNERABILITY_FILE_NAME = "vulnerability.csv"
STRINGS_FILE_NAME = "strings.csv"


class CSVHandler(DataHandler):
    def create_tables(self):
        """ executes the create tables query
        """
        open(VULNERABILITY_FILE_NAME, "w+")
        open(STRINGS_FILE_NAME, "w+")

    def insert(self, vul_entry_dicts: list, string_entry_dicts: list):
        """ inserts lists of vulnerability and string entries

        Args:
            vul_entry_dicts (list): list of entries to add to vulnerability db
            string_entry_dicts (list): list of entries to add to strings db
        """
        self._execute_inserts(
            vul_entry_dicts, VULNERABILITY_FILE_NAME)
        self._execute_inserts(string_entry_dicts,
                              STRINGS_FILE_NAME)

    def should_scan_library(self, version: str, package_name: str, package_manager: str):
        """checks if a library was already scanned by the checker

        Args:
            version (str): package version
            package_name (str): package name
            package_manager (str): package manager
        """
        with open(VULNERABILITY_FILE_NAME) as csvfile:
            readCSV = csv.reader(csvfile, delimiter=',')
            for row in readCSV:
                pk_found = (row[1] == version) and (
                    row[2] == package_name) and (row[3] == package_manager)
                if pk_found:
                    return False
            return True

    def should_check(self, path: str, version: str, package_name: str, package_manager: str):
        """checks if a file was already scanned by the checker

        Args:
            path (str): path of file to be checked
            version (str): package version
            package_name (str): package name
            package_manager (str): package manager
        """
        with open(VULNERABILITY_FILE_NAME) as csvfile:
            readCSV = csv.reader(csvfile, delimiter=',')
            for row in readCSV:
                pk_found = (row[0] == path) and (row[1] == version) and (
                    row[2] == package_name) and (row[3] == package_manager)
                if pk_found:
                    return False
            return True

    def _execute_inserts(self, entries: list, table_name):
        """iterates over list of entries and executes insert for each entry

        Args:
            entries (list): list of entries (dictionaries) to insert
            table_name (str): name of table to insert to
        """
        row_list = list(map(lambda entry: entry.values(), entries))
        with open(f"{table_name}", "a") as fp:
            wr = csv.writer(fp, dialect='excel')
            for row in row_list:
                print(row)
                wr.writerow([])
                wr.writerow(row)
