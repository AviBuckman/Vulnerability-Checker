import subprocess
from csv import reader
import re

MD5 = "md5"
SHA1 = "sha1"
SHA256 = "sha256"
B2 = "b2"


def is_debian():
    result = subprocess.run("whereis dpkg", shell=True,
                            stdout=subprocess.PIPE).stdout.decode('utf-8')
    return result.__contains__('/')


def get_file_type(path):
    """gets file type

    Args:
        path (str): the path of file
    Returns:
        str: return str that represent file type 
        str: file command output
    """
    command = f"file {path}"
    file_info = subprocess.run(
        command, shell=True, stdout=subprocess.PIPE).stdout.decode('utf-8')
    file_info = file_info.split(':')[1]
    if "text" in file_info:
        return file_info, "TEXT"
    elif "ELF" in file_info:
        return file_info, "ELF"
    elif "symbolic link" in file_info:
        return file_info, "LINK"
    else:
        return file_info, None


def get_path_symb_link(path):
    """gets the pointed file and its package 

    Args:
        path (str): the link path

    Returns:
        str: package name 
        str: file path
        str: package version
    """
    command = f"readlink -f {path}"
    pointed_to = subprocess.run(
        command, shell=True, stdout=subprocess.PIPE).stdout.decode('utf-8')
    pointed_to = pointed_to.strip(' \n')
    return pointed_to


def get_installed_libraries_debian():
    """
        runs linux call dpkg -l and outputs list of libraries
        each library is of form dictionary {name, version, architecture}
    """
    row_pattern = r'ii\s+\S+\s+\S+\s+\S+'
    result = subprocess.run("dpkg -l", shell=True,
                            stdout=subprocess.PIPE).stdout.decode('utf-8')
    rows = re.findall(row_pattern, result)
    library_list = list(map(row_to_dictionary, rows))
    print(library_list[0])
    return library_list


def get_installed_libraries_rpm():
    result = subprocess.run("rpm -qa", shell=True,
                            stdout=subprocess.PIPE).stdout.decode('utf-8')
    library_list = result.split("\n")
    print(library_list[0])
    return library_list


def row_to_dictionary(row):
    """extract from row the information of library

    Args:
        row (str): row from the outputted by dpkg -l 

    Returns:
        dictionary: dictionary of library information : name , version , architecture
    """
    field_pattern = r'\s+\S+\s+\S+\s+\S+'
    str_without_i = re.findall(field_pattern, row)[0]
    field_list = re.split(r'\s+', str_without_i)
    lib_dict = {
        "name": field_list[1], "version": field_list[2], "architecture": field_list[3]}
    return lib_dict

# file_scanner.py


def load_from_csv(file_path):
    """read csv file as a list of lists , pass the file object to reader() to get the reader object
    and Pass reader object to list() to get a list of lists
    Returns:
        [list]: list of lists of rows
    """
    with open(file_path, 'r') as read_obj:
        csv_reader = reader(read_obj)
        list_of_rows = list(csv_reader)
        return list(map(lambda x: x[0], list_of_rows))
