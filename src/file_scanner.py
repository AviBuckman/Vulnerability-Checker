import subprocess
from util_functions import load_from_csv
from defs import *
from csv import reader
import re


class FileScanner:
    def __init__(self, vulnerable_functions_path, secret_keys_path):
        self.func_list = load_from_csv(vulnerable_functions_path)
        self.secretKeysList = load_from_csv(secret_keys_path)

    def scan_binary(self, path):
        """
        gets the objdump,checksec and readelf of each file and adds to dictionary (row_dict)

        Args:
            path (str): path of file to be checked

        Returns:
            dictionary: dictionary of file information :  READELF, VULNERABLE_FUNC , CHECKSEC
        """
        dump = subprocess.run(['objdump', '-D', path],
                              stdout=subprocess.PIPE).stdout.decode('utf-8')
        found = set()
        for func_word in self.func_list:
            if f"{func_word}{C_SUFFIX}" in dump:
                # c_suffix is 'GCLIB', this differentiates between library func and user-defined func
                found.add(func_word)
        row_dict = {}
        row_dict[READELF] = subprocess.run(
            f"readelf -a {path}", shell=True, stdout=subprocess.PIPE).stdout.decode('utf-8')
        row_dict[VULNERABLE_FUNC] = str(found) if len(found) > 0 else ""
        command = f"../checksec.sh/checksec --verbose --extended --output=csv --file={path}"
        output = subprocess.run(command, shell=True,
                                stdout=subprocess.PIPE).stdout.decode('utf-8')
        row_dict[CHECKSEC] = output
        return row_dict

    def findKeyWordsInFile(self, output: str):
        """This function reads a string from a text file and searching for secret-keys in the string. 

        Args:
            output (str): string from text file.
            secretKeysList (list): list of secret keys.

        Returns:
            set : The secret-keys found
            set: The lines that contain the secret-keys.
        """
        txt = output
        lines = txt.split("\n")
        found = set()
        linesToAdd = set()
        for line in lines:
            for func_word in self.secretKeysList:
                if re.search(func_word, line, re.IGNORECASE):
                    found.add(func_word)
                    linesToAdd.add(line)

        return found, linesToAdd

    def txtFileChecker(self, path: str):
        """This function get info about text file , extracting the string and checks if the file contains secre-keys in it.

        Args:
            path (str): path to text file 
            package (str): The package in which the file is located
            package_manager (str): The command. Depends on the type of linux system 
            version (str):The package version.

        Returns:
            dictionary : if secret-keys found- with keys: strings, secret_keys.
                        if no secret-keys found -None.
            set: The lines that contain the secret-keys.

        """
        file_dict = dict()
        strings_command = f"{STRINGS} {path}"
        strings_output = subprocess.run(
            strings_command, shell=True, stdout=subprocess.PIPE).stdout.decode('utf-8')
        foundKeys, lines = self.findKeyWordsInFile(strings_output)
        if len(foundKeys) > 0:
            file_dict[STRINGS] = strings_output
            file_dict[SECRET_KEYS] = str(foundKeys)
        else:
            file_dict = None

        return file_dict, lines

    def generate_hashes(self, path):
        """ insert to a list hashes output 

        Args:
            path (str): the file path

        Returns:
            list: list of hash output
        """
        hashes = {SHA1: "", MD5: "", SHA256: "", B2: ""}
        for key in hashes.keys():
            output = subprocess.run(
                f"{key}sum {path}", shell=True, stdout=subprocess.PIPE).stdout.decode('utf-8')
            # try except error
            hashes[key] = output.split(' ')[0]
        return hashes
